import SCAFlexible as scf;
import TriggerEditor.SCATool as sct;

const st = StringBuffer();

const ArrayobjectN = 5000;
const Arraysize = 1000;
const Arraybuffer = EUDArray(ArrayobjectN*Arraysize);
//const Arraybuffer = Db(ArrayobjectN*Arraysize);
const Arrayoffset = EUDArray(py_list(py_range(0, 4 * Arraysize * ArrayobjectN, 4 * Arraysize)));
//py_eval("print(list(range(0, 4 * Arraysize * ArrayobjectN, 4 * Arraysize)))");

var Arrayremaining = ArrayobjectN;


function Arrayalloc(): EUDArray {
    Arrayremaining -= 1;
    //st.printf("Array Alloc remain : {}", Arrayremaining);
    return Arraybuffer + Arrayoffset[Arrayremaining];
}
function Arrayfree(array) {
    Arrayoffset[Arrayremaining] = array - Arraybuffer;
    Arrayremaining += 1;
    //st.printf("Array Free remain : {}", Arrayremaining);
}


const MiniArrayobjectN = 100;
const MiniArraysize = 10;
const MiniArraybuffer = EUDArray(MiniArrayobjectN * MiniArraysize);
const MiniArrayoffset = EUDArray(py_list(py_range(0, 4 * MiniArraysize * MiniArrayobjectN, 4 * MiniArraysize)));
var MiniArrayremaining = MiniArrayobjectN;


function MiniArrayalloc(): EUDArray {
    MiniArrayremaining -= 1;
    //st.printf("MiniArray Alloc remain : {}", MiniArrayremaining);
    return MiniArraybuffer + MiniArrayoffset[MiniArrayremaining];
}
function MiniArrayfree(array) {
    MiniArrayoffset[MiniArrayremaining] = array - MiniArraybuffer;
    MiniArrayremaining += 1;
    //st.printf("MiniArray Free remain : {}", MiniArrayremaining);
}


object SCAReturn{
    //리턴을 여러개 받을 수 있음.
    //리턴을 받으면 값 삭제.
    
    var returnindex;
    var returncount;
    var lastepd;

    var values : EUDArray;
    var valuetypes : EUDArray;
    var valuelens : EUDArray;
    var valuearraytypes : EUDArray;

    function getarray(index) : EUDArray{
        return this.values[index];
    }

    function constructor(epd){
        this.returnindex = dwread_epd(scf.FuncReturnTableEPD + epd);
        epd += 1; if (epd >= scf.FuncLength) epd = 0;

        //시작 리턴 배열
        epd += 1; if (epd >= scf.FuncLength) epd = 0;

        this.returncount = dwread_epd(scf.FuncReturnTableEPD + epd);
        epd += 1; if (epd >= scf.FuncLength) epd = 0;
        this.values = MiniArrayalloc();
        this.valuetypes = MiniArrayalloc();
        this.valuelens = MiniArrayalloc();
        this.valuearraytypes = MiniArrayalloc();

        var vindex = 0;
        for(var i = 0; i < this.returncount; i++){
            const valuetype = dwread_epd(scf.FuncReturnTableEPD + epd); //변수 종류
            epd += 1; if (epd >= scf.FuncLength) epd = 0;
            //st.printf("반환타입 : {}", valuetype);

            switch(valuetype){
                case 1: //Number = 1
                    {
                        this.values[i] = dwread_epd(scf.FuncReturnTableEPD + epd);
                        epd += 1; if (epd >= scf.FuncLength) epd = 0;
                        this.valuetypes[i] = valuetype;
                    }
                    break;
                case 2: //String = 2
                    {
                        const length = dwread_epd(scf.FuncReturnTableEPD + epd);
                        epd += 1; if (epd >= scf.FuncLength) epd = 0;

                        const array = Arrayalloc();
                        for(var ai = 0; ai < length; ai++){
                            array[ai] = dwread_epd(scf.FuncReturnTableEPD + epd);
                            epd += 1; if (epd >= scf.FuncLength) epd = 0;
                        }
                        this.values[i] = array;
                        this.valuelens[i] = length;
                        this.valuetypes[i] = valuetype;
                    }
                    break;
                case 3: //Array = 3
                    {
                        const length = dwread_epd(scf.FuncReturnTableEPD + epd);
                        epd += 1; if (epd >= scf.FuncLength) epd = 0;
                        const array = Arrayalloc();
                        const arraytype = Arrayalloc();
                        for(var ai = 0; ai < length; ai++){
                            const valuetype = dwread_epd(scf.FuncReturnTableEPD + epd); //변수 종류
                            epd += 1; if (epd >= scf.FuncLength) epd = 0;

                            switch(valuetype){
                                case 1: //Number = 1
                                    array[ai] = dwread_epd(scf.FuncReturnTableEPD + epd);
                                    epd += 1; if (epd >= scf.FuncLength) epd = 0;
                                    arraytype[ai] = valuetype;
                                    break; 
                                case 2: //String = 2
                                    const length = dwread_epd(scf.FuncReturnTableEPD + epd);
                                    epd += 1; if (epd >= scf.FuncLength) epd = 0;

                                    const strarray = Arrayalloc();
                                    for(var aii = 0; aii < length; aii++){
                                        strarray[aii] = dwread_epd(scf.FuncReturnTableEPD + epd);
                                        epd += 1; if (epd >= scf.FuncLength) epd = 0;
                                    }
                                    array[ai] = strarray;
                                    arraytype[ai] = valuetype;
                                    break;
                                case 3: //Array = 3
                                    //이런 경우는 없음
                                    break;
                            }
                        }
                        this.values[i] = array;
                        this.valuelens[i] = length;
                        this.valuearraytypes[i] = arraytype;
                        this.valuetypes[i] = valuetype;
                    }
                    break;
            }


        }

        this.lastepd = epd;
    }


    function destructor(){
        for(var i = 0; i < this.returncount; i++){
            if(this.valuetypes[i] == 2){
                Arrayfree(this.values[i]);
            }else if(this.valuetypes[i] == 3){
                Arrayfree(this.values[i]);
                Arrayfree(this.valuearraytypes[i]);
            }
        }
        MiniArrayfree(this.values);
        MiniArrayfree(this.valuetypes);
        MiniArrayfree(this.valuelens);
        MiniArrayfree(this.valuearraytypes);
    }
};

//리턴값 처리기
var lastepd = 0;
const returnarray = EUDArray(100);
function Exec(){
    if(!MemoryEPD(scf.FuncCommandEPD + 1, Exactly, lastepd)){
        const rtoken = SCAReturn.alloc(lastepd);

        const rindex = rtoken.returnindex;

        
        if(returnarray[rindex] != 0){
            //값이 존재하므로 free해준다.
             const item = SCAReturn.cast(returnarray[rindex]);
             SCAReturn.free(item);
             returnarray[rindex] = 0;
        }

        returnarray[rindex] = rtoken;
        
        //st.printf("returnindex : {}, argcount : {}", rtoken.returnindex, rtoken.returncount);
        //st.printf("{} {}", lastepd, rtoken.lastepd);

        lastepd = rtoken.lastepd;
    }
}


//리턴 성공 했는지 판단
function IsReturn(rindex){
    if(returnarray[rindex] != 0){
        return true;
    }else{
        return false;
    }
    
}

//리턴 값 초기화
function ResetReturnObject(rindex){
    if(returnarray[rindex] != 0){
        //값이 존재하므로 free해준다.
        const item = SCAReturn.cast(returnarray[rindex]);
        SCAReturn.free(item);
        returnarray[rindex] = 0;
    }
}

//리턴 오브젝트 반환
function GetReturnObject(rindex) : SCAReturn{
    return returnarray[rindex];
}

