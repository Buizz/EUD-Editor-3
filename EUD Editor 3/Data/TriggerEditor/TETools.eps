/***
 * @Type
 * A
 * @Summary.ko-KR
 * [loc]에 존재하는 [player]의 [unit]을 반환합니다.
 *
 * @param.player.ko-KR
 * 유닛의 소유 플레이어입니다.
 *
 * @param.unit.ko-KR
 * 유닛입니다.
 *
 * @param.loc.ko-KR
 * 로케이션입니다.
***/
function CountAtLoc(player: TrgPlayer, unit: TrgUnit, loc: TrgLocation) {
    // made by Artanis[M] & safhfh & Jpoker & trgk;
    var x = 0xFF;
    foreach(i : py_range(31, -1, -1)) {
        if (x >= py_pow(2, i)) {
            x -= py_pow(2, i);
            if (!Bring(player, AtMost, x, unit, loc)) {
                x += py_pow(2, i);
            }
        }
    }
    return x;
}

function __LocOrderBase(
    epd,
    order_lsh8,
    loc: TrgLocation
) {
    const loc_epd = loc * 5;
    DoActions(loc_epd.AddNumber(EPD(0x58DC4C)));

    const x1 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const y1 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const x2 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const y2 = dwread_epd(loc_epd);

    const x = (x1 + x2) / 2;
    const y = (y1 + y2) << 15;  // = (y1 + y2) / 2 * 65536 

    epd += 0x4D / 4;
    SetMemoryXEPD(epd, SetTo, order_lsh8, 0xFF00);
    epd += (0x58 - 0x4D) / 4;
    SetMemoryEPD(epd, SetTo, y + x);
}

function BuildProbeEPD(epd, loc: TrgLocation, building: TrgUnit) {
    SetMemoryXEPD(epd + 0x98 / 4, SetTo, building, 0xFFFF);
    __LocOrderBase(epd, 31 << 8, loc);
}

function BuildProbe(unitPTR, loc: TrgLocation, building: TrgUnit) {
    BuildProbeEPD(EPD(unitPTR), loc, building);
}

function BuildDroneEPD(epd, loc: TrgLocation, building: TrgUnit) {
    SetMemoryXEPD(epd + 0x98 / 4, SetTo, building, 0xFFFF);
    __LocOrderBase(epd, 25 << 8, loc, building);
}

function BuildDrone(unitPTR, loc: TrgLocation, building: TrgUnit) {
    BuildDroneEPD(EPD(unitPTR), loc, building);
}

function BuildSCVEPD(epd, loc: TrgLocation, building: TrgUnit) {
    SetMemoryXEPD(epd + 0x98 / 4, SetTo, building, 0xFFFF);
    __LocOrderBase(epd, 30 << 8, loc, building);
}

function BuildSCV(unitPTR, loc: TrgLocation, building: TrgUnit) {
    BuildSCVEPD(EPD(unitPTR), loc, building);
}

function COrderLocEPD(epd, order, loc: TrgLocation) {
    __LocOrderBase(epd, order << 8, loc);
}

function COrderLoc(unitPTR, order, loc: TrgLocation) {
    __LocOrderBase(EPD(unitPTR), order << 8, loc);
}

function COrderUnitEPD(unitEPD, order, targetPTR) {
    bwrite_epd(unitEPD + 0x04D / 4,  0x04D % 4, order);
    SetMemoryEPD(unitEPD + 0x05C / 4, SetTo, targetPTR);
}

function COrderUnit(unitPTR, order, targetPTR) {
    bwrite(unitPTR + 0x04D, order);
    dwwrite(unitPTR + 0x05C, targetPTR);
}

function RotateLocation(targetLoc: TrgLocation, originLoc: TrgLocation, angle) {
    const locTable = EPD(0x58DC4C);
    const target = targetLoc * 5;
    const origin = originLoc * 5;
    DoActions(list(
        target.AddNumber(locTable),
        origin.AddNumber(locTable)
    ));

    const tx1 = dwread_epd(target);
    const ox1 = dwread_epd(origin);
    DoActions(list(
        target.AddNumber(1),
        origin.AddNumber(1)
    ));
    const ty1 = dwread_epd(target);
    const oy1 = dwread_epd(origin);
    DoActions(list(
        target.AddNumber(1),
        origin.AddNumber(1)
    ));
    const tx2 = dwread_epd(target);
    const ox2 = dwread_epd(origin);
    DoActions(list(
        target.AddNumber(1),
        origin.AddNumber(1)
    ));
    const ty2 = dwread_epd(target);
    const oy2 = dwread_epd(origin);
    
    const tx, ty = (tx1+tx2)/2, (ty1+ty2)/2;
    const ox, oy = (ox1+ox2)/2, (oy1+oy2)/2;
    const dx, dy = tx-ox, ty-oy;
    const theta = atan2(dy, dx);
    const x, y = lengthdir(sqrt(dx*dx+dy*dy), theta+angle);
    const rx, ry = x-dx, y-dy;
    dwadd_epd(target, ry);
    DoActions(target.AddNumber(-1));
    dwadd_epd(target, rx);
    DoActions(target.AddNumber(-1));
    dwadd_epd(target, ry);
    DoActions(target.AddNumber(-1));
    dwadd_epd(target, rx);
}

function RemoveStatusFlagsEPD(epd, flags) {
    epd += 0xDC / 4;
    DoActions(SetMemoryXEPD(epd, SetTo, 0, flags));
}

function RemoveStatusFlags(unitPTR, flags) {
    dwsubtract_epd(EPD(unitPTR) + 0xDC / 4, flags & dwread_epd(EPD(unitPTR) + 0xDC / 4));
}

function SetPColor(pnum, color) {
    const pcolor_dst = 0x581D76 + 8 * pnum;
    const mcolor_dst = 0x581DD6 + pnum;
    bwrite(pcolor_dst, color);
    bwrite(mcolor_dst, color);
}

function __SpawnBase(epd, unit: TrgUnit, newUnit: TrgUnit) {
    if (
        MemoryXEPD(epd + 0x64/4, Exactly, unit, 0xFFFF)
        && MemoryXEPD(epd + 0x4E/4, Exactly, 0, 0xFF0000)
    ) {
        SetMemoryXEPD(epd + 0x4D/4, SetTo, (42 << 8) + (1 << 16), 0xFFFF00);
        SetMemoryXEPD(epd + 0x98/4, SetTo, newUnit, 0xFFFF);
    }
}

function SpawnCocoonEPD(epd, newUnit: TrgUnit) {
    __SpawnBase(epd, 59, newUnit);
}

function SpawnCocoon(unitPTR, newUnit: TrgUnit) {
    __SpawnBase(EPD(unitPTR), 59, newUnit);
}

function SpawnEggEPD(epd, newUnit: TrgUnit) {
    __SpawnBase(epd, 36, newUnit);
}

function SpawnEgg(unitPTR, newUnit: TrgUnit) {
    __SpawnBase(EPD(unitPTR), 36, newUnit);
}

function MorphLarvaEPD(epd, newUnit: TrgUnit) {
    if (MemoryXEPD(epd + 0x64/4, Exactly, newUnit, 0xFFFF)) {
        SetMemoryXEPD(epd + 0x4D/4, SetTo, 42 << 8, 0xFFFF00);
        SetMemoryXEPD(epd + 0x98/4, SetTo, newUnit, 0xFFFF);
    }
}

function TrainUnitEPD(epd, newUnit: TrgUnit) {
    const nU_and_lsh16 = newUnit * 65537;
    epd += 0x98/4;
    SetMemoryEPD(epd, SetTo, nU_and_lsh16);
    epd += 1;
    SetMemoryEPD(epd, SetTo, nU_and_lsh16);
    epd += 1;
    SetMemoryXEPD(epd, SetTo, newUnit, 0xFFFF);
    epd += 1;
    SetMemoryXEPD(epd, SetTo, 38 << 16, 0xFF0000);
}

function TrainUnit(unitPTR, newUnit: TrgUnit) {
    TrainUnitEPD(EPD(unitPTR), newUnit);
}

function SetUnitColorEPD(epd, color) {
    epd += 0x0C/4;
    const sprite = epdread_epd(epd);
    DoActions(sprite.AddNumber(0x0A/4));
    SetMemoryEPD(sprite, SetTo, color * 65536, 0xFF0000);
}

function SetUnitColor(unitPTR, color) {
    SetUnitColorEPD(EPD(unitPTR), color);
}

function SetLocationToUnitEPD(location: TrgLocation, unitEPD, CUnitOffsetX, CUnitOffsetY) {
    if (CUnitOffsetX == CUnitOffsetY) {
        unitEPD += CUnitOffsetX/4;
        setloc_epd(location, unitEPD);
    } else {
        const x = wread_epd(unitEPD + CUnitOffsetX/4, 0);
        const y = wread_epd(unitEPD + CUnitOffsetY/4, 2);
        setloc(location, x, y);
    }
}

function SetLocationToUnit(location: TrgLocation, unitPTR, CUnitOffsetX, CUnitOffsetY) {
    SetLocationToUnitEPD(location, EPD(unitPTR), CUnitOffsetX, CUnitOffsetY);
}

function SetLocation(location: TrgLocation, X, Y, width, height) {
    setloc(location, X, Y);
    dilateloc(location, width/2, height/2);
}

function EUDMoveLocation(Location: TrgLocation, X, Y) {
    addloc(Location, X, Y);
}

// Warning: This function shouldn't be called under desync condition!
// modified from source: https://cafe.naver.com/edac/91196
function ScreenShake(x, y, tempLoc: TrgLocation) {
    // To prevent desync afterward, rand should run for everyone
    const randX, randY = rand(), rand();
    if (IsUserCP()) {
        const SCREEN_X, SCREEN_Y = 0x628448, 0x628470;
        const rX, rY = (randX % x) - x/2, (randY % y) - y/2;
        const screenX = dwread(SCREEN_X);
        const screenY = dwread(SCREEN_Y);
        VProc(list(rX, rY), list(
            rX.QueueAddTo(screenX),
            rY.QueueAddTo(screenY)
        ));
        setloc(tempLoc, screenX, screenY);
        CenterView(64);
        py_exec("chkt = GetChkTokenized()");
        py_exec("dim = chkt.getsection('DIM')");
        const mapX = py_eval("b2i2(dim) << 4");
        const mapY = py_eval("b2i2(dim, 2) << 4");
        addloc(tempLoc, mapX - dwread(SCREEN_X), dwread(SCREEN_Y) - mapY);
        CenterView(tempLoc);
    }
}

function hotkeyUnitEPD(epd, player: TrgPlayer, hotkey, slot) {
    epd += 0xA5 / 4;
    const targetOrderSpecial = maskread_epd(epd, 0xFF00);
    const alphaID = targetOrderSpecial * 8;
    DoActions(alphaID.AddNumber(1));
    if (epd != 19025 + 0xA5 / 4) {
        epd += 1700 - 0x27821 - 0xA5 / 4;  // diff
        VProc(epd, epd.QueueAddTo(alphaID));
    }
    SetMemoryEPD(EPD(0x57FE60) + 216 * player + 12 * hotkey + slot, SetTo, alphaID);
}

function hotkeyUnit(unitPTR, player: TrgPlayer, hotkey, slot) {
    hotkeyUnitEPD(EPD(unitPTR), player, hotkey, slot);
}

function __GetLocCoord(loc: TrgLocation) {
    const loc_epd = loc * 5;
    DoActions(loc_epd.AddNumber(EPD(0x58DC4C)));
    const x1 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const y1 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const x2 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const y2 = dwread_epd(loc_epd);
    return x1, y1, x2, y2;
}

function LocationAngle(originLoc: TrgLocation, destLoc: TrgLocation) {
    const ox1, ox2, oy1, oy2 = __GetLocCoord(originLoc);
    const dx1, dx2, dy1, dy2 = __GetLocCoord(destLoc);
    const x1 = (ox1 + ox2) / 2;
    const y1 = (oy1 + oy2) / 2;
    const x2 = (dx1 + dx2) / 2;
    const y2 = (dy1 + dy2) / 2;
    return atan2(x2 - x1, y1 - y2);
}

// GetAngle and LocationAngle functions are duplicates..
function GetAngle(originLoc: TrgLocation, destLoc: TrgLocation) {
    return LocationAngle(originLoc, destLoc);
}

function LocationDistance(loc1: TrgLocation, loc2: TrgLocation) {
    const ox1, ox2, oy1, oy2 = __GetLocCoord(loc1);
    const dx1, dx2, dy1, dy2 = __GetLocCoord(loc2);
    const x = dx1 + dx2 - (ox1 + ox2);
    const y = dy1 + dy2 - (oy1 + oy2);
    return sqrt(x*x + y*y) / 2;
}

// LocationDistanceVal actually hasn't written to variable in EE2 TE.
function LocationDistanceVal(variable, loc1: TrgLocation, loc2: TrgLocation) {
    return LocationDistance(loc1, loc2);
}

function PolarLocation(loc: TrgLocation, length, angle) {
    const x, y = lengthdir(length, angle);
    setloc(loc, x, y);
}

function CheckNoneTargetSkillEPD(
    unitEPD,
    range,
    unitLoc: TrgLocation,
    targetLoc: TrgLocation,
    skillOrder /*Order*/
) {
    unitEPD += 0x4D/4;
    if (MemoryXEPD(unitEPD, Exactly, skillOrder * 256, 0xFF00)) {
        unitEPD += -((0x4D - 0x28)/4);
    	const x, y = posread_epd(unitEPD);
	    setloc(unitLoc, x, y);
        unitEPD += (0x58 - 0x28)/4;
	    setloc_epd(targetLoc, unitEPD);

        if (range > LocationDistance(unitLoc, targetLoc)) {
            MoveLocation(targetLoc, 227, AllPlayers, targetLoc);
            unitEPD += -((0x58 - 0x4D)/4);
        	SetMemoryXEPD(unitEPD, SetTo, 0x100, 0xFF00);
            unitEPD += -((0x4D - 0x10)/4);
            SetMemoryEPD(unitEPD, SetTo, x + y * 65536);
            return True;
        }
    }
    return False;
}

function CheckNoneTargetSkill(
    unitPTR,
    range,
    unitLoc: TrgLocation,
    targetLoc: TrgLocation,
    skillOrder /*Order*/
) {
    return CheckNoneTargetSkillEPD(
        EPD(unitPTR),
        range,
        unitLoc,
        targetLoc,
        skillOrder /*Order*/
    );
}

function SetLocationToUnitSafeEPD(location: TrgLocation, unitEPD, posX) {
    unitEPD += posX/4;
    setloc_epd(location, unitEPD);
}

function SetLocationToUnitSafe(location: TrgLocation, unitPTR, posX) {
    SetLocationToUnitSafeEPD(location, EPD(unitPTR), posX);
}

function CheckTargetSkillEPD(
    unitEPD,
    range,
    unitLoc: TrgLocation,
    targetLoc: TrgLocation,
    skillOrder
) {
    if (MemoryXEPD(unitEPD + 0x4D/4, Exactly, skillOrder * 256, 0xFF00)) {
    	const x, y = posread_epd(unitEPD + 0x28/4);
	    setloc(unitLoc, x, y);
        setloc_epd(targetLoc, unitEPD + 0x58/4);
        if (range > LocationDistance(unitLoc, targetLoc)) {
            MoveLocation(targetLoc, 227, 17, targetLoc);
            SetMemoryXEPD(unitEPD + 0x4D/4, SetTo, 0x100, 0xFF00);
            SetMemoryEPD(unitEPD + 0x10/4, SetTo, x + y * 65536);
            return True;
        }
    }
    return False;
}

function CheckTargetSkill(
    unitPTR,
    range,
    unitLoc: TrgLocation,
    targetLoc: TrgLocation,
    skillOrder
) {
    return CheckTargetSkillEPD(EPD(unitPTR), range, unitLoc, targetLoc, skillOrder);
}

function CBringEPD(unitEPD, location: TrgLocation, dummyUnit: TrgUnit) {
    MoveLocation(location, dummyUnit, AllPlayers, location);
    const unitType = unitEPD + 0x64/4;
    const originalUnitType = wread_epd(unitType, 0);
    SetMemoryXEPD(unitType, SetTo, dummyUnit, 0xFFFF);
    const ret = l2v(Bring(AllPlayers, AtLeast, 1, dummyUnit, location));
    SetMemoryXEPD(unitType, SetTo, originalUnitType, 0xFFFF);
    return ret;
}

function CBring(unitPTR, location: TrgLocation, dummyUnit: TrgUnit) {
    return CBringEPD(EPD(unitPTR, location, dummyUnit));
}

function BuildResetEPD(unitEPD) {
    unitEPD += 0x98/4;
    SetMemoryEPD(unitEPD, SetTo, 0xE400E4);
    unitEPD += 1;
    SetMemoryEPD(unitEPD, SetTo, 0xE400E4);
    unitEPD += 1;
    SetMemoryXEPD(unitEPD, SetTo, 228, 0xFFFF);
    unitEPD += 1;
    SetMemoryXEPD(unitEPD, SetTo, 2 << 16, 0xFFFF0000);
}

function BuildReset(unitPTR) {
    BuildResetEPD(EPD(unitPTR));
}

function BuildCheckEPD(unitEPD, unit: TrgUnit) {
    unitEPD += 0x98 / 4;  // buildQueue
    if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
        return True;
    } else {
        const mulUnit = unit * 65536;
        if (MemoryXEPD(unitEPD, Exactly, mulUnit, 0xFFFF0000)) {
            return True;
        } else {
            unitEPD += 1;
            if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
                return True;
            } else if (MemoryXEPD(unitEPD, Exactly, mulUnit, 0xFFFF0000)) {
                return True;
            } else {
                unitEPD += 1;
                if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
                    return True;
                }
            }
        }
    }
    return False;
}

function BuildCheck(unitPTR, unit: TrgUnit) {
    return BuildCheckEPD(EPD(unitPTR), unit);
}

function AttackGround(
    attackLoc: TrgLocation,
    targetLoc: TrgLocation,
    attackUnit: TrgUnit,
    targetUnit: TrgUnit,
    player: TrgPlayer
) {
    if (Memory(0x628438, Exactly, 0)) return;  // avoid EUDError when CCMU
    const aUnit = cunitepdread_epd(EPD(0x628438))[[1]];
    CreateUnit(1, attackUnit, attackLoc, player);
    DoActions(aUnit.AddNumber(0x110 / 4));
    SetMemoryEPD(aUnit, Add, 2);  // aUnit + 0x110 (CUnit::removeTimer)

    if (Memory(0x628438, Exactly, 0)) return;  // avoid EUDError when CCMU
    const tunitptr, tunit = cunitepdread_epd(EPD(0x628438));
    CreateUnit(1, targetUnit, targetLoc, player);
    DoActions(list(
        tunit.AddNumber(0x110 / 4),
        aUnit.AddNumber(-((0x110 - 0x5C) / 4))
    ));
    SetMemoryEPD(aUnit, SetTo, tunitptr);  // aUnit + 0x5C (CUnit::targetUnit)
    SetMemoryEPD(tunit, Add, 2);  // tunit + 0x110 (CUnit::removeTimer)

    DoActions(aUnit.AddNumber(-((0x5C - 0x4D) / 4)));
    SetMemoryXEPD(aUnit, 0xA00, 0xFF00);  // order[10]=attack, 0x4D (CUnit::order)
}

function AddStatusFlagsEPD(epd, flags) {
    epd += 0xDC / 4;
    SetMemoryXEPD(epd, SetTo, ~0, flags);
}

function AddStatusFlags(unitPTR, flags) {
    unitPTR += 0xDC;
    SetMemoryX(unitPTR, SetTo, ~0, flags);
}


function AddSizeLocation(location: TrgLocation, width, height) {
    dilateloc(location, width, height);
}
