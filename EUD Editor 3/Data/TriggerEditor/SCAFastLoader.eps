import SCAFlexible as scf;
import TriggerEditor.SCATool as sct;


var LoadPlayer = 0;
var LoadSCAID = 0; 
var LoadOrder = 0;
var LoadSlot = 0;
var MSQCFLCondition = 0;
var MSQCLocalLoadingStatus = 0; //MSQC전송용 LocalLoadingStatus
const MSQCLoadingStatus = PVariable(); //MSQC전송용 LoadingStatus

const PlayerLoadingStatus = PVariable(); //받은 값 저장용

var MSQCSCAIDCondition = 0;
const MSQCSCAIDHIGH = PVariable();
const MSQCSCAIDLOW = PVariable();
var MSQCLocalSCAIDHIGH;
var MSQCLocalSCAIDLOW;

const SCAID = PVariable();

var LocalSCAID;

var Addr_LocalSCAID;
const Addr_UserExistFlag = PVariable();
const Addr_UserSCAIDInfor = PVariable();
var Addr_LoadingSCAID;
var Addr_LoadingOrder;
var Addr_LoadSlot;
const Addr_LoadingStatus = PVariable();
var Addr_LocalLoadingStatus;
var Addr_DataSpace;


function Init(){    
	EUDRegisterObjectToNamespace("MSQCFLCondition", MSQCFLCondition);
	EUDRegisterObjectToNamespace("MSQCLocalLoadingStatus", MSQCLocalLoadingStatus);
	EUDRegisterObjectToNamespace("MSQCLoadingStatus", MSQCLoadingStatus);

	EUDRegisterObjectToNamespace("MSQCSCAIDCondition", MSQCSCAIDCondition);
	EUDRegisterObjectToNamespace("MSQCSCAIDHIGH", MSQCSCAIDHIGH);
	EUDRegisterObjectToNamespace("MSQCSCAIDLOW", MSQCSCAIDLOW);
	EUDRegisterObjectToNamespace("MSQCLocalSCAIDHIGH", MSQCLocalSCAIDHIGH);
	EUDRegisterObjectToNamespace("MSQCLocalSCAIDLOW", MSQCLocalSCAIDLOW);
	
	const BaseAddr = EPD(scf.ws) + scf.EntryPointLength + (scf.SpaceLength + sct.CommandLength) * 2;
	var offset = 0;

	Addr_LocalSCAID = BaseAddr + offset; offset++;
	for(var i = 0; i < 8; i++){Addr_UserExistFlag[i] = BaseAddr + offset; offset++;}
	for(var i = 0; i < 8; i++){Addr_UserSCAIDInfor[i] = BaseAddr + offset; offset++;}
	Addr_LoadingSCAID = BaseAddr + offset; offset++;
	Addr_LoadingOrder = BaseAddr + offset; offset++;
	Addr_LoadSlot = BaseAddr + offset; offset++;
	for(var i = 0; i < 8; i++){Addr_LoadingStatus[i] = BaseAddr + offset; offset++;}
	Addr_LocalLoadingStatus = BaseAddr + offset; offset++;
	Addr_DataSpace = BaseAddr + offset;
}


var usercount = 0;
var scausercount = 0;
var usercommandstatus = 0;
var userconnectstatus = 0;

function IsAllSCAUser(){
	if(usercount == scausercount && usercount != 0){
		return true;
	}else{
		return false;
	}
}


var loadsecorder = 0;
function Exec(){
    //유저 정보를 수집
	const localplayer = getuserplayerid();
	const UserExist = PVariable();
	for(var p ; p < 8 ; p++){
		UserExist[p] = 0;
	}
	usercount = 0;
	scausercount = 0;

	usercommandstatus = 0;
	userconnectstatus = 0;
	foreach(cp : EUDLoopPlayer("Human")){
		UserExist[cp] = 1;
		usercount++;
		if(sct.ConnectStatus[cp] == 0){
			SCAID[cp] = 0;
			MSQCLoadingStatus[cp] = 0;

			// LoadPlayer = 0;
			// LoadOrder = 0;
			// LoadSCAID = 0;
			// LoadSlot = 0;

			// loadsecorder = 0;

			continue;
		}
		userconnectstatus += 1;
		usercommandstatus += sct.SCACommand[cp];

		if(SCAID[cp] == 0){
			if(localplayer == cp){
				if(MSQCSCAIDCondition == 0){
					//연결되어 있을 경우 런처에서 작성한 LocalSCAID를 읽는다.
					LocalSCAID = dwread_epd(Addr_LocalSCAID);// 메모리에서 직접 읽기

					if(LocalSCAID != 0){
						const LocalSCAIDHIGH = wread_epd(Addr_LocalSCAID, 2);// 메모리에서 직접 읽기
						const LocalSCAIDLOW = wread_epd(Addr_LocalSCAID, 0);// 메모리에서 직접 읽기
						MSQCLocalSCAIDHIGH = LocalSCAIDHIGH;
						MSQCLocalSCAIDLOW = LocalSCAIDLOW;
						MSQCSCAIDCondition = 1;
					}
				}			
			}
			if((MSQCSCAIDHIGH[cp] <= 65536) && (MSQCSCAIDLOW[cp] <= 65536)){
				SCAID[cp] = MSQCSCAIDHIGH[cp] * 65536 + MSQCSCAIDLOW[cp];
			}
		}else{
			scausercount++;
			if(localplayer == cp){
				MSQCSCAIDCondition = 0;
			}
		}

		//데이터 로드중이 아니면 커맨드를 0으로 복구한다.
		if(LoadOrder == 0){
			if(sct.SCACommand[cp] == 6){
				sct.SCACommand[cp] = 0;
				MSQCLoadingStatus[cp] = 0;
			}
		}
	}



	if(usercount == scausercount){
		//모든 유저가 연결된 상태
	}else{
		//한명이라도 연결이 끊킨 상태
		loadsecorder = 0;
		LoadPlayer = 0;
		LoadOrder = 0;
		LoadSCAID = 0;
		LoadSlot = 0;
		//런처도 반영해주야됨.
	}

	if(LoadOrder >= 1){
		var lastLoadingStatus = 0xFFFFFFFF;
		foreach(cp : EUDLoopPlayer("Human")){			
			//데이터 전송 중 일때 다 왔는지 확인하기.
			//LocalLoadingStatus를 확인해서 값이 있으면 MSQC를 통해 LoadingStatus로 전송하기.
			
			//LoadingStatus가 옳은 값이면 데이터가 공유화 된것
			//if(MSQCLoadingStatus[cp] == 0 || MSQCLoadingStatus[cp] >= 65536){
			if(loadsecorder == 0){
				if(localplayer == cp){
					const LoadingStatus = wread_epd(Addr_LocalLoadingStatus, 0);
					if(LoadingStatus != 0 && LoadingStatus != PlayerLoadingStatus[cp]){
						//연결되어 있을 경우 런처에서 작성한 LocalSCAID를 읽는다.
						MSQCLocalLoadingStatus = LoadingStatus;// 메모리에서 직접 읽기
						MSQCFLCondition = 1;
					}
				}
			}else if(loadsecorder == 1){
				if(localplayer == cp){
					const LoadingStatus = wread_epd(Addr_LocalLoadingStatus, 0);
					if(LoadingStatus == 0 && LoadingStatus != PlayerLoadingStatus[cp]){
						//연결되어 있을 경우 런처에서 작성한 LocalSCAID를 읽는다.
						MSQCLocalLoadingStatus = LoadingStatus;// 메모리에서 직접 읽기
						MSQCFLCondition = 1;
					}
				}
			}
			
			if(MSQCLoadingStatus[cp] < 65536){
				if(localplayer == cp){
					MSQCFLCondition = 0;
				}
				PlayerLoadingStatus[cp] = MSQCLoadingStatus[cp];
			}

			if(lastLoadingStatus == 0xFFFFFFFF){
				//마지막 로딩이 없을 경우 현재플레이어로 등록
				lastLoadingStatus = PlayerLoadingStatus[cp];
			}else if(lastLoadingStatus != 0xFFFF0000){
				//로딩 된 상태인데 값이 다를 경우 에러로 대입
				if(lastLoadingStatus != PlayerLoadingStatus[cp]){
					lastLoadingStatus = 0xFFFF0000;
				}
			}
			if(PlayerLoadingStatus[cp] >= 65536){
				lastLoadingStatus = 0xFFFF0000;
			}

			// if(loadsecorder == 0){
			// 	if(LoadOrder == 1){

			// 	}else{
			// 		MSQCLoadingStatus[cp] = 0;
			// 	}
			// }

			// //모든 유저가 로딩이 끝났는지 판단
			// if(LoadOrder == 1){

			// }
		}

		if((loadsecorder == 0) && (lastLoadingStatus != 0xFFFFFFFF) && (lastLoadingStatus != 0xFFFF0000) && (lastLoadingStatus != 0)){
			//Sec를 1대입.
			loadsecorder = 1;
			LoadOrder = 2;
			//MSQCLocalLoadingStatus = 0;// 메모리에서 직접 읽기
		}
		
		if((loadsecorder == 1) && (lastLoadingStatus == 0)){
			MSQCFLCondition = 0;
			//로드완료
			const len = dwread_epd(Addr_DataSpace);

			setcurpl(LoadPlayer);
			sct.LoadDataRead(len, 1, Addr_DataSpace + 1);

			sct.SCALastMessage[LoadPlayer] = 4;
			if (sct.SCAUseUserMessage == 1) {
				setcurpl(LoadPlayer);
				PlayWAV("sound\\Misc\\TDrTra01.wav");
				f_eprintln("\x07성공적으로 \x03데이터\x04를 불러왔습니다.");
			}

			loadsecorder = 0;
			LoadPlayer = 0;
			LoadOrder = 0;
			LoadSCAID = 0;
			LoadSlot = 0;

			foreach(cp : EUDLoopPlayer("Human")){
				sct.SCACommand[cp] = 0;
				MSQCLoadingStatus[cp] = 0;
				PlayerLoadingStatus[cp] = 0xFFFFFFFF;
			}
		}
	}

	// const LoadingStatus = wread_epd(Addr_LocalLoadingStatus, 0);

	// setcurpl(getuserplayerid());
	// f_eprintln("lo : ", LoadOrder, "  lsec : ", loadsecorder, "  lastls : " , lastLoadingStatus, "  localls", LoadingStatus, "  MSQCls : ", MSQCLoadingStatus[getuserplayerid()]);
	// setcurpl(0);

	// if(LoadOrder == 1){
	
	// }else{
	// 	loadsecorder = 0;
	// }



	for(var i = 0; i < 8 ; i++){
		//dwwrite_epd(Addr_UserExistFlag[i], UserExist[i]);
		dwwrite_epd(Addr_UserExistFlag[i], UserExist[i]);
		dwwrite_epd(Addr_UserSCAIDInfor[i], SCAID[i]);
	}
	dwwrite_epd(Addr_LoadingSCAID, LoadSCAID);
	dwwrite_epd(Addr_LoadingOrder, LoadOrder);
	dwwrite_epd(Addr_LoadSlot, LoadSlot);
}



function DataFastLoad(Player, Slot) {
    if (usercount == scausercount) {
        if (usercommandstatus == 0 && LoadOrder == 0) {
			//모든유저에게 적용해야됨
			foreach(cp : EUDLoopPlayer("Human")){
            	sct.SCACommand[cp] = 6;
				usercommandstatus += 6;
			}

			//시작 세팅
			LoadPlayer = Player;
			LoadOrder = 1;
			LoadSCAID = SCAID[Player];
			LoadSlot = Slot;

			//SCA로 넘겨주기
			dwwrite_epd(Addr_LoadingSCAID, LoadSCAID);
			dwwrite_epd(Addr_LoadingOrder, LoadOrder);
			dwwrite_epd(Addr_LoadSlot, LoadSlot);
        } else {
			foreach(cp : EUDLoopPlayer("Human")){
				sct.SCALastMessage[Player] = 8;
				if (sct.SCAUseUserMessage == 1) {
					setcurpl(Player);
					PlayWAV("sound\\Misc\\PError.WAV");
					f_eprintln("\x08이미 데이터를 로드 중입니다.  :", usercommandstatus);
				}
			}
        }
    } else {
		foreach(cp : EUDLoopPlayer("Human")){
			sct.SCALastMessage[Player] = 7;

			if (sct.SCAUseUserMessage == 1) {
				setcurpl(Player);
				PlayWAV("sound\\Misc\\PError.WAV");
						f_eprintln("\x08데이터를 불러오려면 모든 플레이어가 SCArchive와 연결되어야 합니다.");
			}
		}
    }
}
